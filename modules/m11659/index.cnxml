<document xmlns="http://cnx.rice.edu/cnxml">
	<title>DrJava</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m11659</md:content-id>
  <md:title>DrJava</md:title>
  <md:abstract>A short tutorial on using DrJava.</md:abstract>
  <md:uuid>151debfc-8dd2-4a3c-9868-365d83bf9288</md:uuid>
</metadata>
<featured-links>
  <!-- WARNING! The 'featured-links' section is read only. Do not edit below.
       Changes to the links section in the source will not be saved. -->
    <link-group type="supplemental">
      <link url="http://www.drjava.org" strength="3">DrJava home page</link>
      <link url="http://cnx.org/content/m11707/latest/" strength="3">Unit Testing in DrJava</link>
    </link-group>
  <!-- WARNING! The 'featured-links' section is read only. Do not edit above.
       Changes to the links section in the source will not be saved. -->
</featured-links>
<content>
		<para id="p10">DrJava is a lightweight pedagogical environment for Java development created by the <link url="http://www.cs.rice.edu/CS/PLT/">Programming Languages Team (PLT)</link> at Rice University. DrJava provides a way to edit and save java code with key words highlighting, curly brace matching, and an interactive environment to manipulate objects and test code without having to write the main method.  It can be freely downloaded from the web.  Please see the <link url="http://www.drjava.org">DrJava home page</link></para>
		<para id="eip-452"><title>Dr Java Tutorials</title>On the <link url="http://www.drjava.org">main DrJava web site</link>, one can find documentation and tutorials on its use:
<list id="eip-id7643622"><item><link url="http://www.drjava.org/docs/quickstart/"><emphasis effect="bold">Quick Start Guide</emphasis></link>:  This guide covers the most important aspects of using DrJava, such as opening and saving files, compiling, testing, debugging and setting preferences.
	</item>
	<item><link url="http://www.drjava.org/docs/user/"><emphasis effect="bold">Full Documentation</emphasis></link>:  This is the full documentation for DrJava, covering all aspects of the system.</item>
	<item><link url="http://www.drjava.org/faq.shtml"><emphasis effect="bold">FAQ</emphasis></link>:  This Frequently Asked Questions list covers many of the common issues that come up when running DrJava.</item>
	<item><link url="http://www.drjava.org/videos/videos.shtml"><emphasis effect="bold">Video Tutorials</emphasis></link>:  Some short introductory Flash vidoes on installing Java and DrJava and running DrJava.   This is a good place to start for beginnings to get a feel for what can be done with DrJava.   Note: The videos may not run in Internet Explorer, if not, please try accessing the videos using another browser, such as Firefox.</item>
</list>
Below are some short descriptions of the various parts of DrJava.</para><section id="s10">
			<title>Editing</title>
			<para id="s10p10"><emphasis>Definitions Pane:</emphasis> When you run DrJava you will see a window appear. This window (GUI) consists of four subwindows.  The top half of the GUI constitutes the Definitions pane.  You type in all the class definitions here.  After you type in some code, you need to click on the save button before you can compile your code.  All the classes in the Definitions pane will be saved in a single file.  There should only be one public class in the Definitions window, and the saved file should have the same name as that of the public class with the extension <foreign>.java</foreign>.</para>
		</section>
		<section id="s20">
			<title>Compiling</title>
			<para id="s20p10"><emphasis>Compiler Output Pane: </emphasis>You compile your Java code by clicking on the <foreign>Compile All</foreign> button in the menu bar at the top.   Every time you compile your code, DrJava will display all compile error messages here.  Clicking on an error message will highlight the line where the error is suspected to take place in the Definitions pane.  If there is no compile error, DrJava will declare success in this pane.</para>
		</section>
		<section id="s30">
			<title>Running</title>
			<para id="s30p10"><emphasis>Interactions pane:</emphasis> There are several ways to run your Java code.  For now, we will restrict ourselves to the Interaction pane at the bottom of the main GUI window.  This is where you can type in any valid Java statement.  Usually, you would type in code to instantiate objects  of classes defined in the Definitions window, and call their methods to check whether or not they perform correctly.  Typing a valid Java expression terminated with a semi-colon and then pressing the <foreign>Return </foreign>(<foreign>Enter</foreign>) key, will cause DrJava to evaluate the expression but NOT printing the result.  If you want DrJava to print the value of the result in the Interactions window, you should press <foreign>Return </foreign>without terminating the expression with a semi-colon.  There is a menu item to reset (i.e. clear) the Interactions window.   Another way to clear the Interactions window is to force a re-compile by editing the Definitions pane.  If your code has printing statements, the output will be displayed in the Console Output pane.</para>
		</section>
		<section id="s40">
			<title>Testing</title>
			<para id="s40p10">There are many ways to test your code.  The most formal way is to use JUnit testing facilities, which is covered in a separate module: <link document="m11707">Unit Testing with JUnit in DrJava</link>.   For simple tests, you can test your code by directly interacting with it in the Interactions pane.</para>
		</section>
		<section id="s50">
			<title>Debugging</title>
			<para id="s50p10">To debug a program in DrJava, first put DrJava into <term>Debugging Mode</term> by setting the check box under the <emphasis>Debugger</emphasis> on the main menu.   This will enable all the other debugging features.   When debugging mode is active, the debugging pane will appear near the bottom of the DrJava window.   This pane contains the <term>Watch</term> window and tabs that show the current <term>Stack</term> and <term>Threads</term> status.   The debugging pane also has buttons for <emphasis>Resume</emphasis> debugging, <emphasis>Step Into</emphasis>, <emphasis>Step Over</emphasis> and <emphasis>Step Out</emphasis>.  These features are described in detail below.</para><para id="element-380">The basic technique for debugging is to set <term>breakpoints</term> on lines of code that are of interest/problematic and then to either step slowly through the code execution from that point and/or to examine the values of various variables.</para><para id="element-714"><term>Breakpoints</term>: Under debugging mode, DrJava will stop the execution of a program whenever a breakpoint is encountered.  Execution stops <emphasis>before</emphasis> the breakpoints line of code is run.  To set or clear a breakpoint, place the cursor on the desired line of code and either use the <emphasis>Debugger/Toggle Breakpoint on Current Line</emphasis> or by simply pressing <emphasis>Ctrl-B</emphasis> or by right-clicking the desired line and selecting <emphasis>Toggle Breakpoint</emphasis>.   Note that it only makes sense to put a breakpoint on a line of code that actually executes, which <emphasis>excludes</emphasis></para><list id="element-165" list-type="bulleted"><item>Blank lines</item>
	<item>Comments</item>
	<item>Method signature lines</item>
<item>Lines with a single curly brace on them.</item>
<item>Field/attribute declarations that have no initialization code. </item></list><para id="element-337">To <emphasis>clear a breakpoint</emphasis>, follow the same procedure used to set the breakpoint. </para><para id="element-364">Whenever the program execution is stopped on a line of code, the <emphasis>Interactions pane</emphasis> can be used to examine the value of any variable that is in scope or even to execute methods on those variables (if they are objects).  You can even set the values of any available variables by assigning a new value to them.  This is useful if they have the wrong value for some reason and you want to check if the rest of your code will run properly if the correct value is present.  </para><para id="element-750"><term>Clear All Breakpoints</term>: Clicking on <emphasis>Debugger/Clear All Breakpoints</emphasis> will clear all breakpoints that have been set in your program.  </para><para id="element-678">Clicking on <emphasis>Debugger/Breakpoints</emphasis> or pressing <emphasis>Ctrl+Shift+B</emphasis> will bring up a tabbed pane at the bottom of the DrJava window that enables you to conveniently examine, navigate to, delete, or disble (without deleting) all of the breakpoints in your program. </para><para id="element-627"><term>Step Into</term>: When execution has stopped on a line of code, clicking on the <emphasis>Step Into</emphasis> button in the debugging pane or selecting the menu item <emphasis>Debugger/Step Into</emphasis> or pressing <emphasis>F12</emphasis> will cause the current line of code (highlighted in blue) to be executed.  If the current line of code involves the invocation of a method, then the current line of code will be advanced <emphasis>into</emphasis> the first method to be called, as per Java's order of execution rules.  If the current line of code is the last line in a method, the current line of code will become the next executable line of code in the method that <emphasis>called</emphasis> the current method.   Note that if the caller's line of code involved multiple method calls, then the current line of code will return to that line of code in the caller and then execution will advance into the next method to be called, or if the current method was the last method to be called, the current line of code will be the next line of code in the caller.</para><para id="element-198"><term>Step Over</term>:  When execution has stopped on a line of code, clicking on the <emphasis>Step Over</emphasis> button in the debugging pane or selecting the menu item <emphasis>Debugger/Step Over</emphasis> or pressing <emphasis>F11</emphasis> will cause the current line of code to be executed.  This is very similar to Step Into, but if the the execution will <emphasis>not stop</emphasis> inside of any methods called in the current line of code.  Thus the new current line of code will always be in the same method, unless the executed line was the last line in the method, upon which execution will stop in the calling method as usual.   This feature is very useful when you are confident that the methods being called work properly and you are not interested in their detailed execution.</para><para id="element-478"><term>Step Out</term>:  When execution has stopped on a line of code, clicking on the <emphasis>Step Out</emphasis> button in the debugging pane or selecting the menu item <emphasis>Debugger/Step Out</emphasis> or pressing <emphasis>Shift+F12</emphasis> will cause the execution to resume until the current method exits.   Excution will stop at the next executable line in the <emphasis>calling method</emphasis>.  This is very useful to quickly exit a method whose detailed execution no longer interests you (for instance, if you accidentally stepped into a method that you wanted to step over).</para><para id="element-944"><term>Resume Debugging</term>:  When execution has stopped on a line of code, clicking on the <emphasis>Resume</emphasis> button in the debugging pane or selecting the menu item <emphasis>Debugger/Resume Debugging</emphasis> or pressing <emphasis>F7</emphasis> will cause the program execution to resume and continue until the next breakpoint is encountered.   This is useful when you are no longer interested in the detailed execution of the code until the next breakpoint.</para><para id="element-140"><term>Watches</term>: Watches are used when you want to continuously monitor the value of a particular variable.   Simply type the name of the variable or field into the Watch pane and when code execution has paused, if that variable name is in scope, its value will be displayed. </para><para id="element-50"><term>Stack</term>:  The stack contains an ordered list of all methods with pending operations at any given point of a program's execution.   That is, when the program execution has stopped at a particular line of code, the stack contains the method that line of code is in, the method that called that method, the method that called that method, etc.  In DrJava, the <emphasis>Stack</emphasis> tab will show the stack with the current method at the top and the calling method below it.  Looking at the stack is very useful for determining where in your program you actually are, as often a method is called from locations that are unintended or one discovers that a method is not being called from where you wish it to be called.</para><para id="element-105"><term>Threads</term>: A Java program run on many simultaneous execution paths or "threads", each performing different tasks necessary for the total operation of a Java application.   A simple program written by a programmer may have a single thread that runs the code written by that programmer, but may also have many other threads performing such tasks as managing the graphical user interface ("<term>GUI</term>") or managing the memory allocated to the program.  It is also possible for a programmer to write code that utilizes multiple threads of execution to accomplish the desired goals.  The <emphasis>Threads</emphasis> tab is most useful for debugging these multi-threaded programs by enabling the developer to better understand which threads are accessing which objects.    </para>
		</section>
	</content>
	<glossary>
		<definition id="gloss10">
			<term>Interactions pane</term>
			<meaning id="id11196339">The pane at the lower edge of the DrJava window where one can interactively execute Java statements.</meaning>
		</definition>
		<definition id="gloss20">
			<term>Definitions pane</term>
			<meaning id="id11196360">The pane at the upper right of the DrJava window where one edits class definitions.</meaning>
		</definition>
		<definition id="gloss30">
			<term>Unit Test</term>
			<meaning id="id11196380">The testing of a single class or small collection of classes (a "unit") to verify correct behavior at a fine-grained level.</meaning>
		</definition>
	</glossary>
</document>